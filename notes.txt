--dont put package-lock.json or node modules in gitignore

--command1:
npm init
--command2:
npm install -D parcel || npm install --save-dev parcel
--intead of adding react cdn using script tag use command: install react and install react-dom

-D means specified package should only be installed in development environment
--Dependecies means packages required by React app


npx:execute using npm (when you want things to be installed inside your project)

 in order to ignite :) our app use command:
 npx parcel __entry-point__ (here its npx parcel index.html) 


 HMR(Hot Module Reloading) : feature of parcel, which keeps track of all updates in and out app and update the content on server according to it


 --dist:keeps everything minified 

 --browser-list(put it in package.json) : it makes out app compatible with older browsers
 syntax: browser-list:[
  "last 2 versions"
 ]

 --build command: npx parcel build index.html


 -React.createElement => returns an Object => Which is converted to HTML CODE(Inserted into DOM)

 JSX = JavaScript XML
 -JSX is HTML "like" syntax but `its not html inside JavaScript`
 -JSX converts HTML element into React element.
 In javascript you cant return multiple objects and if you want to, then you have to wrap it inside an array
 -In React , you cant return multiple elements in single return
 -To solve this problem, we use JSX  (2 solutions)
 -1.Wrap tour content inside a <div></div> element
 -2.Wrap your content inside <></> , which is called "Fragment"
 -Instead of <></> we can also use <React.Fragment></React.Fragment>
 -JSX uses React.createElement behind the scenes => Converted to Object => Converted to HTML=>Inserted to DOM
 -With JSX you can also write javascript expressions, using curly brackets {..any js code}.
 -Your create-react-app internally uses Babel for JSX to JavaScript conversion



 ->Components in React

 -1.Functional Component:
 In functional component, name of the component starts with capital letter
 It is not mandatory but it is a good practice

 Example:

1.One way to write functional component using Arrow Function
 const Header = () => {
  return(
   <div>
    <h1>Heading 1</h1>
    <h2>Heading 2</h2>
  </div>
  );
 };


 2.Another wayb to write functional component

 const Header = () => (
  <div>
    <h1>Heading 1</h1>
    <h2>Heading 2</h2>
  </div>
 )

 3.We can also use Normal function

 const Header = function() {
  <div>
   <h1>Heading 1</h1>
   <h2>Heading 2</h2>
  </div>
 }


 --when we render react element we use root.render(component_name)*

 --when we render functional component we use root.render(<Component_name/>)  **

 ****IMP****
 -If you want to use react element inside a functional component then use
 {name of react element} 

 --If you want to use functional component inside a functional component then use  
 <Component_name/> or {function_name()}

 --componet inside another component is called Component Composition

 --react-scripts (you can see inside package.json) is actually responsible for inserting react code into root element :)

 --You can remove <React.StrictMode></React.StrictMode>, your app will still run.But it's used for optimization


 Hooks:
 1.useState(any default value): maintains consistancy everywhere in UI

 2.useCallback(funct, dependecies): returns memoized callback function.
 -memoization means caching the value, so that it doesn't need to be recalculated again and again
 -This allows us to isolate resource intensive functions so that they will not automatically run on every render.
-useCallback only runs when one of its dependecies updates.
-Objective is to prevent component from re-rendering unless props(properties or depenedencies) are updated.

 